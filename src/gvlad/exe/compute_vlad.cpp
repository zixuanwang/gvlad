/*
 * compute_vlad.cpp
 *
 *  Created on: May 28, 2013
 *      Author: daniewang
 */

#include <boost/bind.hpp>
#include <boost/lambda/lambda.hpp>
#include "gvlad/lib/File.h"
#include "gvlad/lib/Serializer.h"
#include "gvlad/lib/Vocabulary.h"

std::string descriptor_dir;
std::string vocabulary;
std::string vlad_dir;
std::vector<std::string> file_vector;

void compute_vlad_feature(size_t i) {
	std::string stem = File::get_stem(file_vector[i]);
	GeoDescriptorVector<float> geo_descriptor_vector;
	geo_descriptor_vector.load(file_vector[i]);
	std::vector<float> vlad_feature;
	Vocabulary::instance()->compute_vlad(vlad_feature, geo_descriptor_vector);
	Serializer::save(vlad_feature, vlad_dir + "/" + stem + ".feature");
	std::cout << "computing vlad for " << file_vector[i] << "..." << std::endl;
}

int main(int argc, char* argv[]) {
	if (argc == 1) {
		std::cout
				<< "Usage: ./compute_vlad descriptor_dir vocabulary feature_dir"
				<< std::endl;
		std::cout << "descriptor_dir is the directory of the image descriptors." << std::endl;
		std::cout << "vocabulary is the vocabulary xml file generated by compute_vocabulary." << std::endl;
		std::cout << "feature_dir is the output directory of vlad features." << std::endl;
		std::cout << "For example: ./compute_vlad ~/surf ~/vocabulary.xml ~/vlad" << std::endl;
		return 0;
	}
	if (argc == 4) {
		descriptor_dir = argv[1];
		vocabulary = argv[2];
		vlad_dir = argv[3];
		boost::filesystem::create_directories(vlad_dir);
		Vocabulary::instance()->load(vocabulary);
		File::get_files(file_vector, descriptor_dir);
		for(size_t i = 0; i < file_vector.size(); ++i){
			compute_vlad_feature(i);
		}
	}
	return 0;
}