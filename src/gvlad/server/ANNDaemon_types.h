/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ANNDaemon_TYPES_H
#define ANNDaemon_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace gvlad {

typedef struct _Neighbor__isset {
  _Neighbor__isset() : id(false), distance(false) {}
  bool id;
  bool distance;
} _Neighbor__isset;

class Neighbor {
 public:

  static const char* ascii_fingerprint; // = "C712EF0DA8599E55DF4D0F13415232EF";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x12,0xEF,0x0D,0xA8,0x59,0x9E,0x55,0xDF,0x4D,0x0F,0x13,0x41,0x52,0x32,0xEF};

  Neighbor() : id(), distance(0) {
  }

  virtual ~Neighbor() throw() {}

  std::string id;
  double distance;

  _Neighbor__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_distance(const double val) {
    distance = val;
  }

  bool operator == (const Neighbor & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(distance == rhs.distance))
      return false;
    return true;
  }
  bool operator != (const Neighbor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Neighbor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Neighbor &a, Neighbor &b);

} // namespace

#endif
