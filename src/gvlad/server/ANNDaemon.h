/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ANNDaemon_H
#define ANNDaemon_H

#include <thrift/TDispatchProcessor.h>
#include "ANNDaemon_types.h"

namespace gvlad {

class ANNDaemonIf {
 public:
  virtual ~ANNDaemonIf() {}
  virtual void query(std::vector<Neighbor> & _return, const std::string& image_path, const int32_t k) = 0;
};

class ANNDaemonIfFactory {
 public:
  typedef ANNDaemonIf Handler;

  virtual ~ANNDaemonIfFactory() {}

  virtual ANNDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ANNDaemonIf* /* handler */) = 0;
};

class ANNDaemonIfSingletonFactory : virtual public ANNDaemonIfFactory {
 public:
  ANNDaemonIfSingletonFactory(const boost::shared_ptr<ANNDaemonIf>& iface) : iface_(iface) {}
  virtual ~ANNDaemonIfSingletonFactory() {}

  virtual ANNDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ANNDaemonIf* /* handler */) {}

 protected:
  boost::shared_ptr<ANNDaemonIf> iface_;
};

class ANNDaemonNull : virtual public ANNDaemonIf {
 public:
  virtual ~ANNDaemonNull() {}
  void query(std::vector<Neighbor> & /* _return */, const std::string& /* image_path */, const int32_t /* k */) {
    return;
  }
};

typedef struct _ANNDaemon_query_args__isset {
  _ANNDaemon_query_args__isset() : image_path(false), k(false) {}
  bool image_path;
  bool k;
} _ANNDaemon_query_args__isset;

class ANNDaemon_query_args {
 public:

  ANNDaemon_query_args() : image_path(), k(0) {
  }

  virtual ~ANNDaemon_query_args() throw() {}

  std::string image_path;
  int32_t k;

  _ANNDaemon_query_args__isset __isset;

  void __set_image_path(const std::string& val) {
    image_path = val;
  }

  void __set_k(const int32_t val) {
    k = val;
  }

  bool operator == (const ANNDaemon_query_args & rhs) const
  {
    if (!(image_path == rhs.image_path))
      return false;
    if (!(k == rhs.k))
      return false;
    return true;
  }
  bool operator != (const ANNDaemon_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNDaemon_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNDaemon_query_pargs {
 public:


  virtual ~ANNDaemon_query_pargs() throw() {}

  const std::string* image_path;
  const int32_t* k;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNDaemon_query_result__isset {
  _ANNDaemon_query_result__isset() : success(false) {}
  bool success;
} _ANNDaemon_query_result__isset;

class ANNDaemon_query_result {
 public:

  ANNDaemon_query_result() {
  }

  virtual ~ANNDaemon_query_result() throw() {}

  std::vector<Neighbor>  success;

  _ANNDaemon_query_result__isset __isset;

  void __set_success(const std::vector<Neighbor> & val) {
    success = val;
  }

  bool operator == (const ANNDaemon_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ANNDaemon_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNDaemon_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNDaemon_query_presult__isset {
  _ANNDaemon_query_presult__isset() : success(false) {}
  bool success;
} _ANNDaemon_query_presult__isset;

class ANNDaemon_query_presult {
 public:


  virtual ~ANNDaemon_query_presult() throw() {}

  std::vector<Neighbor> * success;

  _ANNDaemon_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ANNDaemonClient : virtual public ANNDaemonIf {
 public:
  ANNDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ANNDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query(std::vector<Neighbor> & _return, const std::string& image_path, const int32_t k);
  void send_query(const std::string& image_path, const int32_t k);
  void recv_query(std::vector<Neighbor> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ANNDaemonProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ANNDaemonIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ANNDaemonProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_query(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ANNDaemonProcessor(boost::shared_ptr<ANNDaemonIf> iface) :
    iface_(iface) {
    processMap_["query"] = &ANNDaemonProcessor::process_query;
  }

  virtual ~ANNDaemonProcessor() {}
};

class ANNDaemonProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ANNDaemonProcessorFactory(const ::boost::shared_ptr< ANNDaemonIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ANNDaemonIfFactory > handlerFactory_;
};

class ANNDaemonMultiface : virtual public ANNDaemonIf {
 public:
  ANNDaemonMultiface(std::vector<boost::shared_ptr<ANNDaemonIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ANNDaemonMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ANNDaemonIf> > ifaces_;
  ANNDaemonMultiface() {}
  void add(boost::shared_ptr<ANNDaemonIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void query(std::vector<Neighbor> & _return, const std::string& image_path, const int32_t k) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, image_path, k);
    }
    ifaces_[i]->query(_return, image_path, k);
    return;
  }

};

} // namespace

#endif
